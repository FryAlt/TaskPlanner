import logging
import os
from datetime import datetime

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, ErrorEvent

from database import DataBase

from dotenv import load_dotenv

load_dotenv()

router = Router()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DataBase(
    host=os.getenv('DB_HOST'),
    port=os.getenv('DB_PORT'),
    user=os.getenv('DB_USER'),
    password=os.getenv('DB_PASSWORD'),
    database=os.getenv('DB_NAME')
)


#   Commands
@router.message(Command('start'))
async def cmd_start(message: Message):
    # Check if user exists, if not - add to database
    user = await db.fetchrow(
        'SELECT id FROM users WHERE telegramid = $1',
        str(message.from_user.id)
    )
    if not user:
        await db.execute(
            'INSERT INTO users (telegramid) VALUES ($1)',
            str(message.from_user.id)
        )

    await message.answer(
        'üìù –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n'
        '–ò–ª–∏ /help —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n'
    )


@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                         '/add - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n'
                         '/edit - –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É\n'
                         '/delete - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n'
                         '/list - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n'
                         '/enable - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n'
                         '/disable - –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n'
                         )


#   Tasks
@router.message(Command('add'))
async def cmd_add_task(message: Message):
    try:
        # Extract task details from message (assuming format: /add title; description; priority; duedate)
        parts = message.text.split(maxsplit=1)[1].split('; ')
        if len(parts) < 4:
            raise ValueError(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add –ó–∞–≥–æ–ª–æ–≤–æ–∫; –û–ø–∏—Å–∞–Ω–∏–µ; –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç(–Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π); 1–°—Ä–æ–∫('
                '–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)')

        title = parts[0].strip()
        description = parts[1].strip()
        priority = parts[2].strip().lower()
        duedate_str = parts[3].strip()

        # Convert priority to ID
        priority_map = {'–Ω–∏–∑–∫–∏–π': 1, '—Å—Ä–µ–¥–Ω–∏–π': 2, '–≤—ã—Å–æ–∫–∏–π': 3}
        if priority not in priority_map:
            raise ValueError('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π')

        priority_id = priority_map[priority]

        # Parse due date
        try:
            duedate = datetime.strptime(duedate_str, '%Y-%m-%d %H:%M')
        except ValueError:
            raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú')

        # Get user ID
        user = await db.fetchrow(
            'SELECT id FROM users WHERE telegramid = $1',
            str(message.from_user.id)
        )
        if not user:
            raise ValueError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')

        # Create task
        task_id = await db.fetchval(
            '''INSERT INTO tasks (statusid, priorityid, title, description, duedate)
                VALUES (1, $1, $2, $3, $4) RETURNING id''',
            priority_id, title, description, duedate
        )

        # Assign task to user
        await db.execute(
            'INSERT INTO tasksasignments (taskid, userid) VALUES ($1, $2)',
            task_id, user['id']
        )

        await message.answer('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    except (IndexError, ValueError) as e:
        await message.answer(
            f'‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add –ó–∞–≥–æ–ª–æ–≤–æ–∫; –û–ø–∏—Å–∞–Ω–∏–µ; –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç(–Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π); –°—Ä–æ–∫('
            f'–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)')
    except Exception as e:
        await message.answer(f'‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}')


@router.message(Command('edit'))
async def cmd_edit_task(message: Message):
    try:
        # Extract edit details (format: /edit task_id;field;new_value)
        parts = message.text.split(maxsplit=1)[1].split('; ')
        if len(parts) < 3:
            raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit id –ó–∞–¥–∞—á–∏; –ü–æ–ª–µ; –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')

        task_id = int(parts[0].strip())
        field = parts[1].strip().lower()
        new_value = parts[2].strip()

        # Validate field
        valid_fields = {'title', 'description', 'priority', 'status', 'duedate'}
        if field not in valid_fields:
            raise ValueError(f'–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {', '.join(valid_fields)}')

        # Check if task belongs to user
        user_task = await db.fetchrow(
            '''SELECT t.id FROM tasks t
                JOIN tasksasignments ta ON t.id = ta.taskid
                JOIN users u ON ta.userid = u.id
                WHERE u.telegramid = $1 AND t.id = $2''',
            str(message.from_user.id), task_id
        )
        if not user_task:
            raise ValueError('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')

        # Prepare update based on field
        if field == 'priority':
            priority_map = {'–Ω–∏–∑–∫–∏–π': 1, '—Å—Ä–µ–¥–Ω–∏–π': 2, '–≤—ã—Å–æ–∫–∏–π': 3}
            if new_value.lower() not in priority_map:
                raise ValueError('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π')
            await db.execute(
                'UPDATE tasks SET priorityid = $1, updatedat = NOW() WHERE id = $2',
                priority_map[new_value.lower()], task_id
            )
        elif field == 'status':
            status_map = {'–≤ —Ä–∞–±–æ—Ç–µ': 1, '–∑–∞–≤–µ—Ä—à–µ–Ω–∞': 2, '–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞': 3}
            if new_value.lower() not in status_map:
                raise ValueError('–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –≤ —Ä–∞–±–æ—Ç–µ, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞')
            await db.execute(
                'UPDATE tasks SET statusid = $1, updatedat = NOW() WHERE id = $2',
                status_map[new_value.lower()], task_id
            )
        elif field == 'duedate':
            try:
                duedate = datetime.strptime(new_value, '%Y-%m-%d %H:%M')
            except ValueError:
                raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú')
            await db.execute(
                'UPDATE tasks SET duedate = $1, updatedat = NOW() WHERE id = $2',
                duedate, task_id
            )
        else:  # title or description
            await db.execute(
                f'UPDATE tasks SET {field} = $1, updatedat = NOW() WHERE id = $2',
                new_value, task_id
            )

        await message.answer('‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    except (IndexError, ValueError) as e:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit id –ó–∞–¥–∞—á–∏; –ü–æ–ª–µ; –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    except Exception as e:
        await message.answer(f'‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}')


@router.message(Command('delete'))
async def cmd_delete_task(message: Message):
    try:
        task_id = int(message.text.split(maxsplit=1)[1])

        # Check if task belongs to user
        user_task = await db.fetchrow(
            '''SELECT t.id FROM tasks t
                JOIN tasksasignments ta ON t.id = ta.taskid
                JOIN users u ON ta.userid = u.id
                WHERE u.telegramid = $1 AND t.id = $2''',
            str(message.from_user.id), task_id
        )
        if not user_task:
            raise ValueError('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —É–¥–∞–ª–µ–Ω–∏–µ')

        # Delete task (cascade will handle assignments)
        await db.execute('DELETE FROM tasks WHERE id = $1', task_id)

        await message.answer('‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞')
    except (IndexError, ValueError):
        await message.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <id>')
    except Exception as e:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}')


@router.message(Command('list'))
async def list_tasks(message: Message):
    try:
        # Get all tasks for user with status and priority names
        tasks = await db.fetch(
            '''SELECT t.id, t.title, t.description, s.statusname, p.priorityname, t.duedate
                FROM tasks t
                JOIN statuses s ON t.statusid = s.id
                JOIN priorities p ON t.priorityid = p.id
                JOIN tasksasignments ta ON t.id = ta.taskid
                JOIN users u ON ta.userid = u.id
                WHERE u.telegramid = $1
                ORDER BY t.duedate ASC''',
            str(message.from_user.id)
        )

        if not tasks:
            await message.answer('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á')
            return

        response = ['–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n']
        for task in tasks:
            response.append(
                f'id: {task['id']}\n'
                f'–ó–∞–≥–æ–ª–æ–≤–æ–∫(title): {task['title']}\n'
                f'–û–ø–∏—Å–∞–Ω–∏–µ(description): {task['description']}\n'
                f'–°—Ç–∞—Ç—É—Å(status): {task['statusname']}\n'
                f'–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç(priority): {task['priorityname']}\n'
                f'–°—Ä–æ–∫(duedate): {task['duedate'].strftime('%Y-%m-%d %H:%M')}\n'
                '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ'
            )

        # Split long messages to avoid Telegram limits
        full_message = '\n'.join(response)
        for i in range(0, len(full_message), 4096):
            await message.answer(full_message[i:i + 4096])

    except Exception as e:
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {str(e)}')


#   Notifications
@router.message(Command('enable'))
async def enable_notifications(message: Message):
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute(
            'UPDATE users SET notifications_enabled = TRUE WHERE telegramid = $1',
            str(message.from_user.id)
        )
        await message.answer('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}')
        await message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')


@router.message(Command('disable'))
async def disable_notifications(message: Message):
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute(
            'UPDATE users SET notifications_enabled = FALSE WHERE telegramid = $1',
            str(message.from_user.id)
        )
        await message.answer('üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}')
        await message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')


#   Errors
@router.error()
async def error_handler(event: ErrorEvent):
    logger.error(
        '–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ',
        exc_info=event.exception,
        extra={'update': event.update.dict()}
    )
    await event.update.message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
